from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
from crop_model import recommend_crop
from disease_model import detect_disease
from ocrmodule import extract_soil_values
from deep_translator import GoogleTranslator
import os

app = Flask(__name__)
CORS(app)

UPLOAD_FOLDER = "static/uploads"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# ===================== MULTILINGUAL CHATBOT RESPONSES =====================
chat_responses = {
    # ---- GREETINGS ----
    "hello": {
        "en": "Hello! How can I help you today?",
        "hi": "рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ?",
        "te": "р░╣р░▓р▒Л! р░ир▒Зр░ир▒Б р░ор▒Ар░Хр▒Б р░Ор░▓р░╛ р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░Чр░▓р░ир▒Б?",
        "ta": "ро╡рогроХрпНроХроорпН! роЙроЩрпНроХро│рпБроХрпНроХрпБ роОрокрпНрокроЯро┐ роЙродро╡ро▓ро╛роорпН?",
        "kn": "р▓ир▓ор▓╕р│Нр▓Хр▓╛р▓░! р▓ир▓╛р▓ир│Б р▓ир▓┐р▓ор▓Чр│Ж р▓╣р│Зр▓Чр│Ж р▓╕р▓╣р▓╛р▓п р▓ор▓╛р▓бр▓мр▓╣р│Бр▓жр│Б?"
    },
    "hi": {
        "en": "Hi there, farmer! ЁЯМ▒",
        "hi": "рд╣рд╛рдп рдХрд┐рд╕рд╛рди рднрд╛рдИ! ЁЯМ▒",
        "te": "р░╣р░╛р░пр▒Н р░░р▒Ир░др▒Б р░мр░Вр░зр▒Бр░╡р▒Бр░▓р░╛р░░р░╛! ЁЯМ▒",
        "ta": "ро╣ро╛ропрпН ро╡ро┐ро╡роЪро╛ропро┐! ЁЯМ▒",
        "kn": "р▓╣р▓╛р▓пр│Н р▓░р│Ир▓д р▓╕р│Нр▓ир│Зр▓╣р▓┐р▓др▓░р│Ж! ЁЯМ▒"
    },
    "how are you": {
        "en": "I am fine! How are you?",
        "hi": "рдореИрдВ рдЕрдЪреНрдЫрд╛ рд╣реВрдБ! рдЖрдк рдХреИрд╕реЗ рд╣реИрдВ?",
        "te": "р░ир▒Зр░ир▒Б р░мр░╛р░Чр▒Бр░ир▒Нр░ир░╛р░ир▒Б! р░ор▒Ар░░р▒Б р░Ор░▓р░╛ р░Йр░ир▒Нр░ир░╛р░░р▒Б?",
        "ta": "роиро╛ройрпН роиро▓рооро╛роХ роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН! роирпАроЩрпНроХро│рпН роОрокрпНрокроЯро┐?",
        "kn": "р▓ир▓╛р▓ир│Б р▓Ър│Жр▓ир│Нр▓ир▓╛р▓Чр▓┐р▓жр│Нр▓жр│Зр▓ир│Ж! р▓ир│Ар▓╡р│Б р▓╣р│Зр▓Чр▓┐р▓жр│Нр▓жр│Ар▓░р▓┐?"
    },

    # ---- CROP INFORMATION ----
    "best crop for rice field": {
        "en": "Rice grows best in clayey soil with standing water.",
        "hi": "рдЪрд╛рд╡рд▓ рдЪрд┐рдХрдиреА рдорд┐рдЯреНрдЯреА рдФрд░ рдкрд╛рдиреА рднрд░реЗ рдЦреЗрдд рдореЗрдВ рдЕрдЪреНрдЫрд╛ рдЙрдЧрддрд╛ рд╣реИред",
        "te": "р░╡р░░р░┐ р░ор░Яр▒Нр░Яр░┐ р░ор░░р░┐р░пр▒Б р░ир▒Ар░Яр░┐ р░ир░┐р░▓р▒Нр░╡р░▓р▒Л р░мр░╛р░Чр░╛ р░кр▒Жр░░р▒Бр░Чр▒Бр░др▒Бр░Вр░жр░┐.",
        "ta": "роЕро░ро┐роЪро┐ роХро│ро┐роорогрпН роорогрпНрогро┐ро▓рпН рооро▒рпНро▒рпБроорпН родрогрпНрогрпАро░рпН роиро┐ро▒рпИроирпНрод ро╡ропро▓ро┐ро▓рпН роЪро┐ро▒рокрпНрокро╛роХ ро╡ро│ро░рпБроорпН.",
        "kn": "р▓Ер▓Хр│Нр▓Хр▓┐ р▓ор▓гр│Нр▓гр│Б р▓ор▓др│Нр▓др│Б р▓ир│Ар▓░р▓┐р▓ир▓┐р▓Вр▓ж р▓др│Бр▓Вр▓мр▓┐р▓ж р▓╣р│Кр▓▓р▓жр▓▓р│Нр▓▓р▓┐ р▓Йр▓др│Нр▓др▓ор▓╡р▓╛р▓Чр▓┐ р▓мр│Жр▓│р│Жр▓пр│Бр▓др│Нр▓др▓жр│Ж."
    },
    "best fertilizer for wheat": {
        "en": "Urea and DAP are commonly used for wheat growth.",
        "hi": "рдЧреЗрд╣реВрдБ рдХреА рд╡реГрджреНрдзрд┐ рдХреЗ рд▓рд┐рдП рдпреВрд░рд┐рдпрд╛ рдФрд░ рдбреАрдПрдкреА рдХрд╛ рдЙрдкрдпреЛрдЧ рд╣реЛрддрд╛ рд╣реИред",
        "te": "р░Чр▒Лр░зр▒Бр░ор░▓р░Хр▒Б р░пр▒Вр░░р░┐р░пр░╛ р░ор░░р░┐р░пр▒Б р░бр▒Ар░Пр░кр▒А р░╡р░╛р░бр░др░╛р░░р▒Б.",
        "ta": "роХрпЛродрпБроорпИ ро╡ро│ро░рпНроЪрпНроЪро┐роХрпНроХрпБ ропрпВро░ро┐ропро╛ рооро▒рпНро▒рпБроорпН роЯро┐.роП.рокро┐ рокропройрпНрокроЯрпБродрпНродрокрпНрокроЯрпБроХро┐ройрпНро▒рой.",
        "kn": "р▓Чр│Лр▓зр▓┐ р▓мр│Жр▓│р▓╡р▓гр▓┐р▓Чр│Жр▓Чр│Ж р▓пр│Вр▓░р▓┐р▓пр▓╛ р▓ор▓др│Нр▓др│Б р▓бр▓┐р▓Ор▓кр▓┐ р▓мр▓│р▓╕р▓▓р▓╛р▓Чр│Бр▓др│Нр▓др▓жр│Ж."
    },
    "best crop for sandy soil": {
        "en": "Groundnut, watermelon, and potato grow well in sandy soil.",
        "hi": "рд░реЗрддреАрд▓реА рдорд┐рдЯреНрдЯреА рдореЗрдВ рдореВрдВрдЧрдлрд▓реА, рддрд░рдмреВрдЬ рдФрд░ рдЖрд▓реВ рдЕрдЪреНрдЫреЗ рдЙрдЧрддреЗ рд╣реИрдВред",
        "te": "р░Зр░╕р▒Бр░Х р░ор░Яр▒Нр░Яр░┐р░▓р▒Л р░кр░▓р▒Нр░▓р▒Ар░▓р▒Б, р░кр▒Бр░Ър▒Нр░Ър░Хр░╛р░п, р░мр░Вр░Чр░╛р░│р░жр▒Бр░Вр░кр░▓р▒Б р░мр░╛р░Чр░╛ р░кр▒Жр░░р▒Бр░Чр▒Бр░др░╛р░пр░┐.",
        "ta": "роорогро▓рпН роорогрпНрогро┐ро▓рпН роХроЯро▓рпИ, родро░рпНрокрпВроЪрогро┐, роЙро░рпБро│рпИроХрпНроХро┐ро┤роЩрпНроХрпБ роиро▓рпНро▓родрпБ.",
        "kn": "р▓ор▓░р▓│р│Б р▓ор▓гр│Нр▓гр▓┐р▓ир▓▓р│Нр▓▓р▓┐ р▓Хр▓бр▓▓р│Жр▓Хр▓╛р▓пр▓┐, р▓Хр▓▓р│Нр▓▓р▓Вр▓Чр▓бр▓┐, р▓Жр▓▓р│Вр▓Чр▓бр│Нр▓бр│Ж р▓Ър│Жр▓ир│Нр▓ир▓╛р▓Чр▓┐ р▓мр│Жр▓│р│Жр▓пр│Бр▓др│Нр▓др▓╡р│Ж."
    },

    # ---- FERTILIZER / SOIL ----
    "what is npk fertilizer": {
        "en": "NPK fertilizer contains Nitrogen (N), Phosphorus (P), and Potassium (K).",
        "hi": "рдПрдирдкреАрдХреЗ рдЦрд╛рдж рдореЗрдВ рдирд╛рдЗрдЯреНрд░реЛрдЬрди, рдлреЙрд╕реНрдлреЛрд░рд╕ рдФрд░ рдкреЛрдЯреИрд╢рд┐рдпрдо рд╣реЛрддреЗ рд╣реИрдВред",
        "te": "р░Ор░ир▒НтАМр░кр▒Ар░Хр▒З р░Ор░░р▒Бр░╡р▒Бр░▓р▒Л р░ир▒Ир░Яр▒Нр░░р▒Лр░Ьр░ир▒Н, р░лр░╛р░╕р▒Нр░кр░░р░╕р▒Н, р░кр▒Кр░Яр░╛р░╖р░┐р░пр░В р░Йр░Вр░Яр░╛р░пр░┐.",
        "ta": "роОройрпНроОройрпНрокро┐роХрпЗ роЙро░родрпНродро┐ро▓рпН роирпИроЯрпНро░роЬройрпН, рокро╛ро╕рпНрокро░ро╕рпН, рокрпКроЯрпНроЯро╛роЪро┐ропроорпН роЙро│рпНро│рой.",
        "kn": "р▓Ор▓ир│НтАМр▓кр▓┐р▓Хр│Ж р▓░р▓╕р▓Чр│Кр▓мр│Нр▓мр▓░р▓жр▓▓р│Нр▓▓р▓┐ р▓ир│Ир▓╕р▓░р│Нр▓Чр▓┐р▓Х, р▓лр▓╛р▓╕р│Нр▓кр▓░р▓╕р│Н р▓ор▓др│Нр▓др│Б р▓кр│Кр▓Яр│Нр▓пр▓╛р▓╕р▓┐р▓пр▓В р▓Зр▓╡р│Ж."
    },
    "improve soil fertility": {
        "en": "Add organic compost, green manure, and crop rotation to improve soil.",
        "hi": "рдЬреИрд╡рд┐рдХ рдЦрд╛рдж, рд╣рд░реА рдЦрд╛рдж рдФрд░ рдлрд╕рд▓ рдЪрдХреНрд░ рд╕реЗ рдорд┐рдЯреНрдЯреА рдХреА рдЙрд░реНрд╡рд░рддрд╛ рдмрдврд╝рд╛рдПрдБред",
        "te": "р░╕р▒Зр░Вр░жр▒Нр░░р▒Ар░п р░Ор░░р▒Бр░╡р▒Б, р░Чр▒Нр░░р▒Ар░ир▒Н р░ор░╛р░ир▒Нр░пр▒Вр░░р▒Н, р░кр░Вр░Я р░ор░╛р░░р▒Нр░кр░┐р░бр░┐ р░╡р░╛р░бр░╛р░▓р░┐.",
        "ta": "роЪрпЖропро▒рпНроХрпИ роЙро░роорпН, рокроЪрпНроЪрпИ роЙро░роорпН, рокропро┐ро░рпН рооро╛ро▒рпБродро▓рпН роорпВро▓роорпН роорогрпН ро╡ро│роорпН роЕродро┐роХро░ро┐роХрпНроХрпБроорпН.",
        "kn": "р▓╕р│Зр▓Вр▓жр│Нр▓░р│Ар▓п р▓Чр│Кр▓мр│Нр▓мр▓░, р▓╣р▓╕р▓┐р▓░р│Б р▓Чр│Кр▓мр│Нр▓мр▓░ р▓ор▓др│Нр▓др│Б р▓мр│Жр▓│р│Ж р▓мр▓жр▓▓р▓╛р▓╡р▓гр│Ж р▓мр▓│р▓╕р▓мр│Зр▓Хр│Б."
    },

    # ---- DISEASES ----
    "leaf spots in rice": {
        "en": "Brown spot disease тАУ spray fungicide like Mancozeb.",
        "hi": "рдмреНрд░рд╛рдЙрди рд╕реНрдкреЙрдЯ рд░реЛрдЧ тАУ рдореИрдирдХреЛрдЬреЗрдм рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВред",
        "te": "р░мр▒Нр░░р▒Мр░ир▒Н р░╕р▒Нр░кр░╛р░Яр▒Н р░╡р▒Нр░пр░╛р░зр░┐ тАУ р░ор░╛р░Вр░Хр▒Лр░Ьр▒Жр░мр▒Н р░кр░┐р░Ър░┐р░Хр░╛р░░р▒А р░Ър▒Зр░пр░╛р░▓р░┐.",
        "ta": "рокро┤рпБрокрпНрокрпБ рокрпБро│рпНро│ро┐ роирпЛропрпН тАУ рооро╛ройрпНроХрпЛроЪрпЖрокрпН родрпЖро│ро┐роХрпНроХро╡рпБроорпН.",
        "kn": "р▓мр│Нр▓░р│Мр▓ир│Н р▓╕р│Нр▓кр▓╛р▓Яр│Н р▓░р│Лр▓Ч тАУ р▓ор│Нр▓пр▓╛р▓Вр▓Хр│Лр▓Ьр│Жр▓мр│Н р▓╕р▓┐р▓Вр▓кр▓бр▓┐р▓╕р▓┐."
    },
    "yellow leaves in maize": {
        "en": "It may be nitrogen deficiency. Apply urea.",
        "hi": "рдпрд╣ рдирд╛рдЗрдЯреНрд░реЛрдЬрди рдХреА рдХрдореА рд╣реИред рдпреВрд░рд┐рдпрд╛ рдбрд╛рд▓реЗрдВред",
        "te": "р░Зр░жр░┐ р░ир▒Ир░Яр▒Нр░░р▒Лр░Ьр░ир▒Н р░▓р▒Лр░кр░В. р░пр▒Вр░░р░┐р░пр░╛ р░╡р▒Зр░пр░╛р░▓р░┐.",
        "ta": "роЗродрпБ роирпИроЯрпНро░роЬройрпН роХрпБро▒рпИрокро╛роЯрпБ. ропрпВро░ро┐ропро╛ рокрпЛроЯро╡рпБроорпН.",
        "kn": "р▓Зр▓жр│Б р▓ир│Ир▓Яр│Нр▓░р│Лр▓Ьр▓ир│Н р▓Хр│Кр▓░р▓др│Ж. р▓пр│Вр▓░р▓┐р▓пр▓╛ р▓╣р▓╛р▓Хр▓┐."
    },

    # ---- MARKET & SCHEMES ----
    "government schemes": {
        "en": "PM-Kisan, Soil Health Card, and Crop Insurance are available schemes.",
        "hi": "рдкреАрдПрдо-рдХрд┐рд╕рд╛рди, рдорд┐рдЯреНрдЯреА рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХрд╛рд░реНрдб, рдлрд╕рд▓ рдмреАрдорд╛ рдЙрдкрд▓рдмреНрдз рдпреЛрдЬрдирд╛рдПрдБ рд╣реИрдВред",
        "te": "р░кр▒Ар░Ор░В-р░Хр░┐р░╕р░╛р░ир▒Н, р░ор░Яр▒Нр░Яр░┐ р░Жр░░р▒Лр░Чр▒Нр░п р░Хр░╛р░░р▒Нр░бр▒Б, р░кр░Вр░Я р░мр▒Ар░ор░╛ р░Ер░Вр░жр▒Бр░мр░╛р░Яр▒Бр░▓р▒Л р░Йр░ир▒Нр░ир░╛р░пр░┐.",
        "ta": "рокро┐ро░родрооро░рпН-роХро┐роЪро╛ройрпН, роорогрпН роЖро░рпЛроХрпНроХро┐роп роЕроЯрпНроЯрпИ, рокропро┐ро░рпН роХро╛рокрпНрокрпАроЯрпБ роЙро│рпНро│рой.",
        "kn": "р▓кр▓┐р▓Ор▓В-р▓Хр▓┐р▓╕р▓╛р▓ир│Н, р▓ор▓гр│Нр▓гр│Б р▓Жр▓░р│Лр▓Чр│Нр▓п р▓Хр▓╛р▓░р│Нр▓бр│Н р▓ор▓др│Нр▓др│Б р▓мр│Жр▓│р│Ж р▓╡р▓┐р▓ор│Ж р▓▓р▓нр│Нр▓пр▓╡р▓┐р▓жр│Ж."
    },
    "market price of rice": {
        "en": "Rice price is around тВ╣2300 per quintal.",
        "hi": "рдЪрд╛рд╡рд▓ рдХрд╛ рджрд╛рдо рд▓рдЧрднрдЧ тВ╣2300 рдкреНрд░рддрд┐ рдХреНрд╡рд┐рдВрдЯрд▓ рд╣реИред",
        "te": "р░мр░┐р░пр▒Нр░пр░В р░зр░░ р░╕р▒Бр░ор░╛р░░р▒Б тВ╣2300 р░Хр▒Нр░╡р░┐р░Вр░Яр░╛р░▓р▒Н.",
        "ta": "роЕро░ро┐роЪро┐ ро╡ро┐ро▓рпИ роХрпБро╡ро┐ройрпНроЯро▓рпН роТройрпНро▒рпБроХрпНроХрпБ тВ╣2300.",
        "kn": "р▓Ер▓Хр│Нр▓Хр▓┐ р▓мр│Жр▓▓р│Ж р▓Хр│Нр▓╡р▓┐р▓Вр▓Яр▓▓р│НтАМр▓Чр│Ж тВ╣2300."
    }
}

# ===================== USER MANAGEMENT =====================
users = {}

@app.route("/")
def home():
    return render_template("index.html")

@app.route("/signup", methods=["POST"])
def signup():
    data = request.get_json()
    username = data.get("username")
    password = data.get("password")
    if not username or not password:
        return jsonify({"error": "Username and password are required."}), 400
    if username in users:
        return jsonify({"error": "Username already exists."}), 400
    users[username] = password
    return jsonify({"message": "Signup successful! Please login."})

@app.route("/login", methods=["POST"])
def login():
    data = request.get_json()
    username = data.get("username")
    password = data.get("password")
    if username in users and users[username] == password:
        return jsonify({"message": f"Welcome {username}!"})
    return jsonify({"error": "Invalid credentials."}), 401

# ===================== SOIL OCR UPLOAD =====================
@app.route("/upload_soil_report", methods=["POST"])
def upload_soil_report():
    if "soil_report" not in request.files:
        return jsonify({"error": "No file uploaded"}), 400

    file = request.files["soil_report"]
    if file.filename == "":
        return jsonify({"error": "No selected file"}), 400

    try:
        ocr_result = extract_soil_values(file)
        values = ocr_result["values"]

        recommended_crops = recommend_crop(values)

        return jsonify({
            "raw_text": ocr_result["raw_text"],
            "values": values,
            "report_type": ocr_result["report_type"],
            "recommended_crops": recommended_crops
        })
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# ===================== CROP RECOMMENDATION =====================
@app.route("/recommend_crop", methods=["POST"])
def recommend_crop_route():
    data = request.get_json()
    if not data:
        return jsonify({"error": "No data provided"}), 400

    try:
        recommended_crops = recommend_crop(data)
        return jsonify({"recommended_crops": recommended_crops})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# ===================== DISEASE DETECTION =====================
@app.route("/detect_disease", methods=["POST"])
def detect_disease_route():
    if "leaf_image" not in request.files:
        return jsonify({"error": "No file uploaded"}), 400
    file = request.files["leaf_image"]
    if file.filename == "":
        return jsonify({"error": "No selected file"}), 400
    try:
        result = detect_disease(file)
        return jsonify({"result": result})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# ===================== MARKET PRICES =====================
@app.route("/market_prices")
def market_prices():
    prices = {"Rice": 2300, "Wheat": 1900, "Maize": 1700}
    return jsonify(prices)

# ===================== CHATBOT =====================
@app.route("/chat_assistant", methods=["POST"])
def chat_assistant():
    data = request.get_json()
    query = data.get("message", "").lower()
    lang = data.get("lang", "en").lower()

    if not query:
        return jsonify({"error": "No message provided"}), 400

    response = None
    for q, ans in chat_responses.items():
        if q in query:
            response = ans.get(lang, ans["en"])
            break

    if not response:
        response = {
            "en": "Sorry, I don't understand. Please try again.",
            "hi": "рдорд╛рдлрд╝ рдХреАрдЬрд┐рдП, рдореБрдЭреЗ рд╕рдордЭ рдирд╣реАрдВ рдЖрдпрд╛ред",
            "te": "р░Хр▒Нр░╖р░ор░┐р░Вр░Ър░Вр░бр░┐, р░ир░╛р░Хр▒Б р░Ер░░р▒Нр░ер░В р░Хр░╛р░▓р▒Зр░жр▒Б.",
            "ta": "рооройрпНройро┐роХрпНроХро╡рпБроорпН, роОройроХрпНроХрпБ рокрпБро░ро┐ропро╡ро┐ро▓рпНро▓рпИ.",
            "kn": "р▓Хр│Нр▓╖р▓ор▓┐р▓╕р▓┐, р▓ир▓ир▓Чр│Ж р▓Ер▓░р│Нр▓ер▓╡р▓╛р▓Чр▓▓р▓┐р▓▓р│Нр▓▓."
        }.get(lang, "Sorry, I don't understand.")

    return jsonify({"reply": response})

# ===================== TRANSLATION =====================
@app.route("/translate", methods=["POST"])
def translate():
    try:
        data = request.get_json()
        text = data.get("text")
        lang = data.get("lang")
        if not text or not lang:
            return jsonify({"error": "Missing text or language"}), 400

        lang_map = {"english": "en", "hindi": "hi", "telugu": "te", "tamil": "ta", "kannada": "kn"}
        target_lang = lang_map.get(lang.lower(), "en")
        translated = GoogleTranslator(source="auto", target=target_lang).translate(text)
        return jsonify({"translation": translated})
    except Exception as e:
        return jsonify({"error": str(e)}), 500


import os

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))  # Railway sets PORT dynamically
    app.run(host="0.0.0.0", port=port, debug=True)
